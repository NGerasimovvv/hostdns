// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: host.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HostDnsService_SetHostname_FullMethodName     = "/host.HostDnsService/SetHostname"
	HostDnsService_GetDnsServers_FullMethodName   = "/host.HostDnsService/GetDnsServers"
	HostDnsService_AddDnsServer_FullMethodName    = "/host.HostDnsService/AddDnsServer"
	HostDnsService_RemoveDnsServer_FullMethodName = "/host.HostDnsService/RemoveDnsServer"
)

// HostDnsServiceClient is the client API for HostDnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostDnsServiceClient interface {
	SetHostname(ctx context.Context, in *SetHostnameRequest, opts ...grpc.CallOption) (*SetHostnameResponse, error)
	GetDnsServers(ctx context.Context, in *GetDnsServersRequest, opts ...grpc.CallOption) (*GetDnsServersResponse, error)
	AddDnsServer(ctx context.Context, in *AddDnsServerRequest, opts ...grpc.CallOption) (*AddDnsServerResponse, error)
	RemoveDnsServer(ctx context.Context, in *RemoveDnsServerRequest, opts ...grpc.CallOption) (*RemoveDnsServerResponse, error)
}

type hostDnsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostDnsServiceClient(cc grpc.ClientConnInterface) HostDnsServiceClient {
	return &hostDnsServiceClient{cc}
}

func (c *hostDnsServiceClient) SetHostname(ctx context.Context, in *SetHostnameRequest, opts ...grpc.CallOption) (*SetHostnameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHostnameResponse)
	err := c.cc.Invoke(ctx, HostDnsService_SetHostname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostDnsServiceClient) GetDnsServers(ctx context.Context, in *GetDnsServersRequest, opts ...grpc.CallOption) (*GetDnsServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDnsServersResponse)
	err := c.cc.Invoke(ctx, HostDnsService_GetDnsServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostDnsServiceClient) AddDnsServer(ctx context.Context, in *AddDnsServerRequest, opts ...grpc.CallOption) (*AddDnsServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDnsServerResponse)
	err := c.cc.Invoke(ctx, HostDnsService_AddDnsServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostDnsServiceClient) RemoveDnsServer(ctx context.Context, in *RemoveDnsServerRequest, opts ...grpc.CallOption) (*RemoveDnsServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDnsServerResponse)
	err := c.cc.Invoke(ctx, HostDnsService_RemoveDnsServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostDnsServiceServer is the server API for HostDnsService service.
// All implementations must embed UnimplementedHostDnsServiceServer
// for forward compatibility
type HostDnsServiceServer interface {
	SetHostname(context.Context, *SetHostnameRequest) (*SetHostnameResponse, error)
	GetDnsServers(context.Context, *GetDnsServersRequest) (*GetDnsServersResponse, error)
	AddDnsServer(context.Context, *AddDnsServerRequest) (*AddDnsServerResponse, error)
	RemoveDnsServer(context.Context, *RemoveDnsServerRequest) (*RemoveDnsServerResponse, error)
	mustEmbedUnimplementedHostDnsServiceServer()
}

// UnimplementedHostDnsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHostDnsServiceServer struct {
}

func (UnimplementedHostDnsServiceServer) SetHostname(context.Context, *SetHostnameRequest) (*SetHostnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostname not implemented")
}
func (UnimplementedHostDnsServiceServer) GetDnsServers(context.Context, *GetDnsServersRequest) (*GetDnsServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsServers not implemented")
}
func (UnimplementedHostDnsServiceServer) AddDnsServer(context.Context, *AddDnsServerRequest) (*AddDnsServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDnsServer not implemented")
}
func (UnimplementedHostDnsServiceServer) RemoveDnsServer(context.Context, *RemoveDnsServerRequest) (*RemoveDnsServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDnsServer not implemented")
}
func (UnimplementedHostDnsServiceServer) mustEmbedUnimplementedHostDnsServiceServer() {}

// UnsafeHostDnsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostDnsServiceServer will
// result in compilation errors.
type UnsafeHostDnsServiceServer interface {
	mustEmbedUnimplementedHostDnsServiceServer()
}

func RegisterHostDnsServiceServer(s grpc.ServiceRegistrar, srv HostDnsServiceServer) {
	s.RegisterService(&HostDnsService_ServiceDesc, srv)
}

func _HostDnsService_SetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostDnsServiceServer).SetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostDnsService_SetHostname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostDnsServiceServer).SetHostname(ctx, req.(*SetHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostDnsService_GetDnsServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostDnsServiceServer).GetDnsServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostDnsService_GetDnsServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostDnsServiceServer).GetDnsServers(ctx, req.(*GetDnsServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostDnsService_AddDnsServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDnsServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostDnsServiceServer).AddDnsServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostDnsService_AddDnsServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostDnsServiceServer).AddDnsServer(ctx, req.(*AddDnsServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostDnsService_RemoveDnsServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDnsServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostDnsServiceServer).RemoveDnsServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostDnsService_RemoveDnsServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostDnsServiceServer).RemoveDnsServer(ctx, req.(*RemoveDnsServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostDnsService_ServiceDesc is the grpc.ServiceDesc for HostDnsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostDnsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "host.HostDnsService",
	HandlerType: (*HostDnsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetHostname",
			Handler:    _HostDnsService_SetHostname_Handler,
		},
		{
			MethodName: "GetDnsServers",
			Handler:    _HostDnsService_GetDnsServers_Handler,
		},
		{
			MethodName: "AddDnsServer",
			Handler:    _HostDnsService_AddDnsServer_Handler,
		},
		{
			MethodName: "RemoveDnsServer",
			Handler:    _HostDnsService_RemoveDnsServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "host.proto",
}
